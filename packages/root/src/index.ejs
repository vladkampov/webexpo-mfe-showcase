<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Root Config</title>

  <!--
    Remove this if you only support browsers that support async/await.
    This is needed by babel to share largeish helper code for compiling async/await in older
    browsers. More information at https://github.com/single-spa/create-single-spa/issues/112
  -->
  <script src="https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js"></script>

  <!--
    This CSP allows any SSL-enabled host and for arbitrary eval(), but you should limit these directives further to increase your app's security.
    Learn more about CSP policies at https://content-security-policy.com/#directive
  -->
  <meta name="importmap-type" content="systemjs-importmap" />
  <!-- If you wish to turn off import-map-overrides for specific environments (prod), uncomment the line below -->
  <!-- More info at https://github.com/joeldenning/import-map-overrides/blob/master/docs/configuration.md#domain-list -->
  <!-- <meta name="import-map-overrides-domains" content="denylist:prod.example.com" /> -->

  <!-- Shared dependencies go into this import map. Your shared dependencies must be of one of the following formats:

    1. System.register (preferred when possible) - https://github.com/systemjs/systemjs/blob/master/docs/system-register.md
    2. UMD - https://github.com/umdjs/umd
    3. Global variable

    More information about shared dependencies can be found at https://single-spa.js.org/docs/recommended-setup#sharing-with-import-maps.
  -->
  <script type="systemjs-importmap">
    {
      "imports": {
        "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
        "react": "https://cdn.jsdelivr.net/npm/react@16.13.1/umd/react.production.min.js",
        "react-dom": "https://cdn.jsdelivr.net/npm/react-dom@16.13.1/umd/react-dom.production.min.js"
      }
    }
  </script>
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js" as="script">


  <!--
    If you need to support Angular applications, uncomment the script tag below to ensure only one instance of ZoneJS is loaded
    Learn more about why at https://single-spa.js.org/docs/ecosystem-angular/#zonejs
  -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/zone.js@0.11.3/dist/zone.min.js"></script> -->

    <script type="systemjs-importmap">
      {
        "imports": {
          "@single-spa/welcome": "https://unpkg.com/single-spa-welcome/dist/single-spa-welcome.js",
          "@kampov/root-config": "//localhost:9000/kampov-root-config.js",
          "@kampov/header": "//localhost:9001/kampov-header.js",
          "@kampov/genres": "//localhost:9002/kampov-genres.js",
          "@kampov/movies": "//localhost:9003/kampov-movies.js"
        }
      }
    </script>
  <script src="https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js"></script>
  <% if (isLocal) { %>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js"></script>
  <% } else { %>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.min.js"></script>
  <% } %>

</head>
<body>
  <noscript>
    You need to enable JavaScript to run this app.
  </noscript>
  <% if (isLocal) { %>
    <script>
      System.import('@kampov/root-config');
    </script>
  <% } else { %>
    <script>
      fetch("//webexpo-mfe-showcase-server.vercel.app/bundles" + window.location.search).then(res => res.json()).then((importMap) => {
        var s = document.createElement('script');
        s.type = 'systemjs-importmap';

        try {
          s.appendChild(document.createTextNode(JSON.stringify(importMap)));
          document.body.appendChild(s);
        } catch (e) {
          s.text = JSON.stringify(importMap);
          document.body.appendChild(s);
        }

        System.import('@kampov/root-config');
      })
    </script>
  <% } %>
  <style>
    .container {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 12px;
    }
    body {
      background: #141414;
      color: #fff;
      cursor: default;
      font-family: Netflix Sans,Helvetica Neue,Segoe UI,Roboto,Ubuntu,sans-serif;
      display: flex;
      justify-content: center;
    }

    #debugPanel {
        position: fixed;
        top: 0;
        right: 0;
        background: #000;
        color: #fff;
        padding: 10px;
        z-index: 1000;
    }
  </style>
  <import-map-overrides-full show-when-local-storage="devtools" dev-libs></import-map-overrides-full>

  <script>
    async function featureTogglesPanel() {
      const params = new URLSearchParams(window.location.search);
      const isDebug = params.has('debug');

      if (!isDebug) {
        return null;
      }

      const bundlesLocalOverrideMap = {
        "@kampov/header": "http://localhost:9001/kampov-header.js",
        "@kampov/genres": "http://localhost:9002/kampov-genres.js",
        "@kampov/movies": "http://localhost:9003/kampov-movies.js"
      }

      const overridesStr = new URLSearchParams(window.location.search).get('overrides');
      const overrides = JSON.parse(overridesStr || '{}');

      const isDev =  window ? window.location.hostname === "localhost" : true;

      const res = await fetch(isDev ? "//localhost:9004/feature-toggles" : "//webexpo-mfe-showcase-server.vercel.app/feature-toggles");
      const config = await res.json();


      const debugPanel = document.createElement('div');
      debugPanel.id = 'debugPanel';

      const features = Object.keys(config.toggles);
      const bundles = Array.from(new Set(['@kampov/header', '@kampov/genres', '@kampov/movies']));

      const featureTogglesTitle = document.createElement('h3');
      featureTogglesTitle.innerText = 'Feature Toggles';
      debugPanel.append(featureTogglesTitle);

      const featureTogglesList = document.createElement('div');
      features.forEach((feature) => {
          const toggle = document.createElement('p');
          const button = document.createElement('button');
          const isEnabled = config.toggles[feature] || overrides?.toggles?.[feature];

          button.innerText = `${feature}: ${isEnabled ? '✅' : '❌'}`;

          button.onclick = (e) => {
            e.preventDefault();

            if (!overrides.toggles) {
              overrides.toggles = {};
            }

            overrides.toggles[feature] = !isEnabled;
            const overrideString  = JSON.stringify(overrides)
            params.set('overrides', overrideString);

            window.location.replace(window.location.pathname + '?' + params.toString());
          }

          toggle.append(button)
          featureTogglesList.append(toggle);
      });

      debugPanel.append(featureTogglesList)

      const bundlesTitle = document.createElement('h3');
      bundlesTitle.innerText = 'Bundles';
      debugPanel.append(bundlesTitle);

      const bundlesList = document.createElement('div');
      bundles.forEach((bundleName) => {
        const bundle = document.createElement('p');
        const button = document.createElement('button');
        const isOverriden = overrides.bundles?.hasOwnProperty(bundleName);

        button.innerText = `${bundleName}: ${isOverriden ? '✅ local' : '🌎 public'}`;

        button.onclick = (e) => {
          e.preventDefault();

          if (!overrides.bundles) {
            overrides.bundles = {};
          }

          if (isOverriden) {
            delete overrides.bundles[bundleName];
          } else {
            overrides.bundles[bundleName] = bundlesLocalOverrideMap[bundleName];
          }

          const overrideString  = JSON.stringify(overrides)
          params.set('overrides', overrideString);

          window.location.replace(window.location.pathname + '?' + params.toString());
        }

        bundle.append(button)
        bundlesList.append(bundle);
      });

      debugPanel.append(bundlesList);

      document.body.appendChild(debugPanel);
    }


    window.onload = () => {
      featureTogglesPanel();
    }
  </script>
</body>
</html>
